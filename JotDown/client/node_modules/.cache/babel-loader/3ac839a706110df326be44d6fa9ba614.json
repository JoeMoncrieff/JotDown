{"ast":null,"code":"var _jsxFileName = \"/Users/JoeMoncrieff/Desktop/SideProjects/JotDownAtt2/JotDown/client/src/TextEditor.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport \"quill/dist/quill.snow.css\";\nimport Quill from \"quill\";\nimport { useEffect, useCallback, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { useParams } from 'react-router-dom'; // Setting up what we want on our toolbarOptions\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar toolbarOptions = [['bold', 'italic'], ['underline', 'strike'], // toggled buttons\n['blockquote', 'code-block'], [{\n  'list': 'ordered'\n}, {\n  'list': 'bullet'\n}], [{\n  'script': 'sub'\n}, {\n  'script': 'super'\n}], // superscript/subscript\n[{\n  'direction': 'rtl'\n}], // text direction\n[{\n  'header': [2, 3, 4, 5, 6, false]\n}, {\n  'font': []\n}], [{\n  'color': []\n}, {\n  'background': []\n}], // dropdown with defaults from theme\n[{\n  'align': []\n}, 'clean'] // remove formatting button\n];\nexport default function TextEditor() {\n  _s();\n\n  const {\n    id: documentid\n  } = useParams();\n  const [socket, setSocket] = useState();\n  const [quill, setQuill] = useState();\n  useEffect(() => {\n    const s = io(\"http://localhost:3001\");\n    setSocket(s);\n    return () => {\n      s.disconnect();\n    };\n  }, []); // This useEffect is for when we type something into the box this use useEffect\n  // listens for that and then sends that change to the server.\n\n  useEffect(() => {\n    //Making sure both our socket and quill are initialised before\n    //we run this\n    if (socket == null || quill == null) return; //Setting up a listener that detects changes from the server\n\n    const handler = function (delta, oldDelta, source) {\n      if (source !== 'user') return;\n      socket.emit(\"send-changes\", delta);\n    };\n\n    quill.on('text-change', handler); //Removing the function when we no longer need it.\n\n    return () => {\n      quill.off('text-change', handler);\n    };\n  }); //This useEffect is for receiving changes from the server to update our own document.\n\n  useEffect(() => {\n    //Making sure both our socket and quill are initialised before\n    //we run this\n    if (socket == null || quill == null) return; //handler function that receives a delta from the server then updates our\n    //quill\n\n    const handler = function (delta) {\n      quill.updateContents(delta);\n    };\n\n    socket.on('receive-changes', handler); //Removing the function when we no longer need it.\n\n    return () => {\n      quill.off('receive-changes', handler);\n    };\n  }, [socket, quill]);\n  useEffect(() => {\n    if (socket == null || quill == null) return;\n    socket.once('load-document', document => {\n      quill.setContents(document);\n      quill.enable();\n    });\n    socket.emit('get-document', documentid);\n  }, [socket, quill, documentid]); // wrapperRef is a callback here so it is set before the return\n  // statement below is loaded\n\n  const wrapperRef = useCallback(wrapper => {\n    if (wrapper == null) return;\n    wrapper.innerHTML = ''; //creating div like this so that the quill toolbar is included\n    //in the divider\n\n    const editor = document.createElement('div');\n    wrapper.append(editor); //Runs on render. Sets up our tool bar and puts the text box\n    //in the container\n\n    const q = new Quill(editor, {\n      theme: \"snow\",\n      modules: {\n        toolbar: toolbarOptions\n      }\n    });\n    q.disable();\n    q.setText('Loading JotNote');\n    setQuill(q);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    ref: wrapperRef\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 10\n  }, this);\n}\n\n_s(TextEditor, \"PtwV9g2Pz8Dn+1NtbYDGlCO75ek=\", false, function () {\n  return [useParams];\n});\n\n_c = TextEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextEditor\");","map":{"version":3,"sources":["/Users/JoeMoncrieff/Desktop/SideProjects/JotDownAtt2/JotDown/client/src/TextEditor.js"],"names":["React","Quill","useEffect","useCallback","useState","io","useParams","toolbarOptions","TextEditor","id","documentid","socket","setSocket","quill","setQuill","s","disconnect","handler","delta","oldDelta","source","emit","on","off","updateContents","once","document","setContents","enable","wrapperRef","wrapper","innerHTML","editor","createElement","append","q","theme","modules","toolbar","disable","setText"],"mappings":"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","sourcesContent":["import React from 'react'\nimport \"quill/dist/quill.snow.css\"\nimport Quill from \"quill\"\nimport {useEffect, useCallback, useState} from \"react\"\nimport {io} from \"socket.io-client\"\nimport {useParams} from 'react-router-dom'\n\n// Setting up what we want on our toolbarOptions\nvar toolbarOptions = [\n['bold', 'italic'],\n['underline', 'strike'],       // toggled buttons\n['blockquote', 'code-block'],\n[{ 'list': 'ordered'}, { 'list': 'bullet' }],\n[{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\n[{'direction': 'rtl'}],                         // text direction\n\n[{ 'header': [2, 3, 4, 5, 6, false] },{ 'font': [] }],\n[{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\n[{ 'align': [] },'clean']                                     // remove formatting button\n];\n\nexport default function TextEditor()\n{\n  const {id: documentid} = useParams()\n  const [socket, setSocket] = useState()\n  const [quill, setQuill] = useState()\n\n\n  useEffect(() =>\n  {\n    const s = io(\"http://localhost:3001\")\n    setSocket(s)\n\n    return () => {\n      s.disconnect()\n    }\n  },[])\n\n  // This useEffect is for when we type something into the box this use useEffect\n  // listens for that and then sends that change to the server.\n  useEffect(() => {\n    //Making sure both our socket and quill are initialised before\n    //we run this\n    if (socket == null || quill == null) return\n\n    //Setting up a listener that detects changes from the server\n    const handler = function(delta, oldDelta, source) {\n       if (source !== 'user') return\n\n       socket.emit(\"send-changes\", delta)\n       }\n\n    quill.on('text-change', handler)\n\n    //Removing the function when we no longer need it.\n    return() => {\n      quill.off('text-change',handler)\n    }\n\n  })\n\n  //This useEffect is for receiving changes from the server to update our own document.\n  useEffect(() => {\n    //Making sure both our socket and quill are initialised before\n    //we run this\n    if (socket == null || quill == null) return\n\n    //handler function that receives a delta from the server then updates our\n    //quill\n    const handler = function(delta)\n    {\n       quill.updateContents(delta)\n    }\n\n    socket.on('receive-changes', handler)\n\n    //Removing the function when we no longer need it.\n    return() => {\n      quill.off('receive-changes',handler)\n    }\n\n  },[socket,quill])\n\n  useEffect(() => {\n    if (socket == null || quill == null) return\n\n    socket.once('load-document', document => {\n      quill.setContents(document)\n      quill.enable()\n    })\n\n    socket.emit('get-document', documentid)\n  }, [socket,quill,documentid])\n\n\n\n  // wrapperRef is a callback here so it is set before the return\n  // statement below is loaded\n  const wrapperRef = useCallback(wrapper =>\n  {\n    if (wrapper == null) return\n    wrapper.innerHTML = ''\n    //creating div like this so that the quill toolbar is included\n    //in the divider\n    const editor = document.createElement('div');\n    wrapper.append(editor);\n    //Runs on render. Sets up our tool bar and puts the text box\n    //in the container\n    const q = new Quill(editor,{theme:\"snow\",modules:{toolbar:toolbarOptions}})\n    q.disable()\n    q.setText('Loading JotNote')\n    setQuill(q)\n  },[])\n  return <div className=\"container\" ref={wrapperRef}></div>\n}\n"]},"metadata":{},"sourceType":"module"}